use num_traits::identities::Zero;
#[derive(Parser, Debug, Clone)]
enum SubCommand {
    Attach(CmdDiskAttach),
    Create(CmdDiskCreate),
    Detach(CmdDiskDetach),
    Edit(CmdDiskEdit),
    List(CmdDiskList),
    Create(CmdDiskCreate),
    #[clap(alias = "get")]
    View(CmdDiskView),
    Delete(CmdDiskDelete),
}

#[doc = "List disks."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdDiskList {
    #[doc = "The project that holds the disks."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The order in which to sort the results."]
    #[clap(long = "sort-by", short = 's', default_value_t)]
    pub sort_by: oxide_api::types::NameSortMode,
    #[doc = r" Maximum number of items to list."]
    #[clap(long, short, default_value = "30")]
    pub limit: u32,
    #[doc = r" Make additional HTTP requests to fetch all pages."]
    #[clap(long)]
    pub paginate: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdDiskList {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.limit < 1 {
            return Err(anyhow::anyhow!("--limit must be greater than 0"));
        }

        let client = ctx.api_client("")?;
        let results = if self.paginate {
            client
                .disks()
                .get_all(&self.organization, &self.project, self.sort_by.clone())
                .await?
        } else {
            client
                .disks()
                .get_page(
                    self.limit,
                    &self.organization,
                    "",
                    &self.project,
                    self.sort_by.clone(),
                )
                .await?
        };
        let format = ctx.format(&self.format)?;
        ctx.io.write_output_for_vec(&format, &results)?;
        Ok(())
    }
}

#[doc = "Create a new disk.\n\nTo create a disk interactively, use `oxide disk create` with no arguments."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdDiskCreate {
    #[doc = "The name of the disk to create."]
    #[clap(name = "disk", required = true)]
    pub disk: String,
    #[doc = "The project that holds the disk."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The description for the disk."]
    #[clap(long = "description", short = 'D', default_value_t)]
    pub description: String,
    #[doc = "initial source for this disk"]
    #[clap(long = "disk-source")]
    pub disk_source: Option<oxide_api::types::DiskSource>,
    #[doc = "total size of the Disk in bytes"]
    #[clap(long = "size", default_value_t)]
    pub size: oxide_api::types::ByteCount,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdDiskCreate {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        let mut description = self.description.clone();
        let mut disk_source = self.disk_source.clone();
        let mut disk = self.disk.clone();
        let mut organization = self.organization.clone();
        let mut project = self.project.clone();
        let mut size = self.size.clone();
        if description.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-D|--description required in non-interactive mode"
            ));
        }

        if disk_source.is_none() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "--disk-source required in non-interactive mode"
            ));
        }

        if disk.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!("[disk] required in non-interactive mode"));
        }

        if organization.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-o|--organization required in non-interactive mode"
            ));
        }

        if project.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-p|--project required in non-interactive mode"
            ));
        }

        if size.is_zero() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!("--size required in non-interactive mode"));
        }

        let client = ctx.api_client("")?;
        if ctx.io.can_prompt() {
            if organization.is_empty() {
                let mut orgs: Vec<String> = Vec::new();
                let resp = client
                    .organizations()
                    .get_all(oxide_api::types::NameOrIdSortMode::NameAscending)
                    .await?;
                for org in resp {
                    orgs.push(org.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Project organization:")
                    .items(&orgs)
                    .interact()
                {
                    Ok(index) => organization = orgs[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if project.is_empty() {
                let mut org_projects: Vec<String> = Vec::new();
                let projects = client
                    .projects()
                    .get_all(
                        &organization,
                        oxide_api::types::NameOrIdSortMode::NameAscending,
                    )
                    .await?;
                for project in projects {
                    org_projects.push(project.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Select project:")
                    .items(&org_projects)
                    .interact()
                {
                    Ok(index) => project = org_projects[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if disk.is_empty() {
                match dialoguer::Input::<String>::new()
                    .with_prompt(&format!("{} name:", "disk"))
                    .interact_text()
                {
                    Ok(name) => disk = name,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if description.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("disk description")
                    .interact_text()
                {
                    Ok(input) => description = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if disk_source.is_none() {
                {
                    use crate::prompt_ext::PromptExt;
                    disk_source = Some(oxide_api::types::DiskSource::prompt(
                        "Input a image or snapshot id for the disk source",
                    )?);
                }
            }
            if size.is_zero() {
                {
                    use crate::prompt_ext::PromptExt;
                    size = oxide_api::types::ByteCount::prompt("disk size")?;
                }
            }
        }

        client
            .disks()
            .post(
                &self.organization,
                &self.project,
                &oxide_api::types::DiskCreate {
                    description: description.clone(),
                    disk_source: disk_source.unwrap(),
                    name: disk.clone(),
                    size: size.clone(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", organization, project);
        writeln!(
            ctx.io.out,
            "{} Created {} {} in {}",
            cs.success_icon(),
            "disk",
            disk,
            full_name
        )?;
        Ok(())
    }
}

#[doc = "View disk.\n\nDisplay information about an Oxide disk.\n\nWith `--web`, open the disk in a web browser instead."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdDiskView {
    #[doc = "The disk to view. Can be an ID or name."]
    #[clap(name = "disk", required = true)]
    pub disk: String,
    #[doc = "The project that holds the disk."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "Open the disk in the browser."]
    #[clap(short, long)]
    pub web: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdDiskView {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.web {
            let url = format!("https://{}/{}", ctx.config.default_host()?, self.disk);
            ctx.browser("", &url)?;
            return Ok(());
        }

        let client = ctx.api_client("")?;
        let result = client
            .disks()
            .get(&self.disk, &self.organization, &self.project)
            .await?;
        let format = ctx.format(&self.format)?;
        ctx.io.write_output(&format, &result)?;
        Ok(())
    }
}

#[doc = "Delete disk."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdDiskDelete {
    #[doc = "The disk to delete. Can be an ID or name."]
    #[clap(name = "disk", required = true)]
    pub disk: String,
    #[doc = "The project to delete the disk from."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = r" Confirm deletion without prompting."]
    #[clap(long)]
    pub confirm: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdDiskDelete {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if !ctx.io.can_prompt() && !self.confirm {
            return Err(anyhow::anyhow!(
                "--confirm required when not running interactively"
            ));
        }

        let client = ctx.api_client("")?;
        if !self.confirm {
            if let Err(err) = dialoguer::Input::<String>::new()
                .with_prompt(format!("Type {} to confirm deletion:", self.disk))
                .validate_with(|input: &String| -> Result<(), &str> {
                    if input.trim() == self.disk {
                        Ok(())
                    } else {
                        Err("mismatched confirmation")
                    }
                })
                .interact_text()
            {
                return Err(anyhow::anyhow!("prompt failed: {}", err));
            }
        }

        client
            .disks()
            .delete(&self.disk, &self.organization, &self.project)
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        writeln!(
            ctx.io.out,
            "{} Deleted {} {} from {}",
            cs.success_icon_with_color(ansi_term::Color::Red),
            "disk",
            self.disk,
            full_name
        )?;
        Ok(())
    }
}

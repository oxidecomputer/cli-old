use num_traits::identities::Zero;
#[derive(Parser, Debug, Clone)]
enum SubCommand {
    List(CmdOrganizationList),
    Create(CmdOrganizationCreate),
    #[clap(alias = "get")]
    View(CmdOrganizationView),
    Edit(CmdOrganizationEdit),
    Delete(CmdOrganizationDelete),
}

#[doc = "List organizations."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdOrganizationList {
    #[doc = "The order in which to sort the results."]
    #[clap(long = "sort-by", short = 's', default_value_t)]
    pub sort_by: oxide_api::types::NameOrIdSortMode,
    #[doc = r" Maximum number of items to list."]
    #[clap(long, short, default_value = "30")]
    pub limit: u32,
    #[doc = r" Make additional HTTP requests to fetch all pages."]
    #[clap(long)]
    pub paginate: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdOrganizationList {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.limit < 1 {
            return Err(anyhow::anyhow!("--limit must be greater than 0"));
        }

        let client = ctx.api_client("")?;
        let results = if self.paginate {
            client.organizations().get_all(self.sort_by.clone()).await?
        } else {
            client
                .organizations()
                .get_page(self.limit, "", self.sort_by.clone())
                .await?
        };
        let format = ctx.format(&self.format)?;
        ctx.io.write_output_for_vec(&format, &results)?;
        Ok(())
    }
}

#[doc = "Create a new organization.\n\nTo create a organization interactively, use `oxide organization create` with no arguments."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdOrganizationCreate {
    #[doc = "The name of the organization to create."]
    #[clap(name = "organization", required = true)]
    pub organization: String,
    #[doc = "The description for the organization."]
    #[clap(long = "description", short = 'D', default_value_t)]
    pub description: String,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdOrganizationCreate {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        let mut description = self.description.clone();
        let mut organization = self.organization.clone();
        if description.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-D|--description required in non-interactive mode"
            ));
        }

        if organization.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "[organization] required in non-interactive mode"
            ));
        }

        let client = ctx.api_client("")?;
        if ctx.io.can_prompt() {
            if organization.is_empty() {
                match dialoguer::Input::<String>::new()
                    .with_prompt(&format!("{} name:", "organization"))
                    .interact_text()
                {
                    Ok(name) => organization = name,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if description.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("organization description")
                    .interact_text()
                {
                    Ok(input) => description = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
        }

        client
            .organizations()
            .post(&oxide_api::types::OrganizationCreate {
                description: description.clone(),
                name: organization.clone(),
            })
            .await?;
        let cs = ctx.io.color_scheme();
        writeln!(
            ctx.io.out,
            "{} Created {} {}",
            cs.success_icon(),
            "organization",
            organization
        )?;
        Ok(())
    }
}

#[doc = "View organization.\n\nDisplay information about an Oxide organization.\n\nWith `--web`, open the organization in a web browser instead."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdOrganizationView {
    #[doc = "The organization to view. Can be an ID or name."]
    #[clap(name = "organization", required = true)]
    pub organization: String,
    #[doc = "Open the organization in the browser."]
    #[clap(short, long)]
    pub web: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdOrganizationView {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.web {
            let url = format!(
                "https://{}/{}",
                ctx.config.default_host()?,
                self.organization
            );
            ctx.browser("", &url)?;
            return Ok(());
        }

        let client = ctx.api_client("")?;
        let result = client.organizations().get(&self.organization).await?;
        let format = ctx.format(&self.format)?;
        ctx.io.write_output(&format, &result)?;
        Ok(())
    }
}

#[doc = "Edit organization settings."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdOrganizationEdit {
    #[doc = "The organization to edit. Can be an ID or name."]
    #[clap(name = "organization", required = true)]
    pub organization: String,
    #[doc = "The new description for the organization."]
    #[clap(long = "description", short = 'D', required = false, default_value_t)]
    pub new_description: String,
    #[doc = "The new name for the organization."]
    #[clap(long = "name", short = 'n', required = false, default_value_t)]
    pub new_name: oxide_api::types::Name,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdOrganizationEdit {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.new_description.is_empty() && self.new_name.is_empty() {
            return Err(anyhow::anyhow!("nothing to edit"));
        }

        let client = ctx.api_client("")?;
        let mut name = self.organization.clone();
        if !self.new_name.is_empty() {
            name = self.new_name.to_string();
        }

        let result = client
            .organizations()
            .put(
                &self.organization,
                &oxide_api::types::OrganizationUpdate {
                    description: self.new_description.clone(),
                    name: self.new_name.clone(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        if !self.new_name.is_empty() {
            writeln!(
                ctx.io.out,
                "{} Edited {} {} -> {}",
                cs.success_icon(),
                "organization",
                self.organization,
                self.new_name
            )?;
        } else {
            writeln!(
                ctx.io.out,
                "{} Edited {} {}",
                cs.success_icon_with_color(ansi_term::Color::Red),
                "organization",
                self.organization
            )?;
        }

        Ok(())
    }
}

#[doc = "Delete organization."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdOrganizationDelete {
    #[doc = "The organization to delete. Can be an ID or name."]
    #[clap(name = "organization", required = true)]
    pub organization: String,
    #[doc = r" Confirm deletion without prompting."]
    #[clap(long)]
    pub confirm: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdOrganizationDelete {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if !ctx.io.can_prompt() && !self.confirm {
            return Err(anyhow::anyhow!(
                "--confirm required when not running interactively"
            ));
        }

        let client = ctx.api_client("")?;
        if !self.confirm {
            if let Err(err) = dialoguer::Input::<String>::new()
                .with_prompt(format!("Type {} to confirm deletion:", self.organization))
                .validate_with(|input: &String| -> Result<(), &str> {
                    if input.trim() == self.organization {
                        Ok(())
                    } else {
                        Err("mismatched confirmation")
                    }
                })
                .interact_text()
            {
                return Err(anyhow::anyhow!("prompt failed: {}", err));
            }
        }

        client.organizations().delete(&self.organization).await?;
        let cs = ctx.io.color_scheme();
        writeln!(
            ctx.io.out,
            "{} Deleted {} {}",
            cs.success_icon_with_color(ansi_term::Color::Red),
            "organization",
            self.organization
        )?;
        Ok(())
    }
}

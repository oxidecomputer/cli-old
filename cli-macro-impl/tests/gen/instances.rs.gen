use num_traits::identities::Zero;
#[derive(Parser, Debug, Clone)]
enum SubCommand {
    List(CmdInstanceList),
    Create(CmdInstanceCreate),
    #[clap(alias = "get")]
    View(CmdInstanceView),
    Delete(CmdInstanceDelete),
}

#[doc = "List instances."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdInstanceList {
    #[doc = "The project that holds the instances."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The order in which to sort the results."]
    #[clap(long = "sort-by", short = 's', default_value_t)]
    pub sort_by: oxide_api::types::NameSortMode,
    #[doc = r" Maximum number of items to list."]
    #[clap(long, short, default_value = "30")]
    pub limit: u32,
    #[doc = r" Make additional HTTP requests to fetch all pages."]
    #[clap(long)]
    pub paginate: bool,
    #[doc = r" Output format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdInstanceList {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.limit < 1 {
            return Err(anyhow::anyhow!("--limit must be greater than 0"));
        }

        let client = ctx.api_client("")?;
        let results = if self.paginate {
            client
                .instances()
                .get_all(&self.organization, &self.project, self.sort_by.clone())
                .await?
        } else {
            client
                .instances()
                .get_page(
                    self.limit,
                    &self.organization,
                    "",
                    &self.project,
                    self.sort_by.clone(),
                )
                .await?
        };
        let format = ctx.format(&self.format)?;
        ctx.io.write_output_for_vec(&format, &results)?;
        Ok(())
    }
}

#[doc = "Create a new instance.\n\nTo create a instance interactively, use `oxide instance create` with no arguments."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdInstanceCreate {
    #[doc = "The name of the instance to create."]
    #[clap(name = "instance", required = true)]
    pub instance: String,
    #[doc = "The project that holds the instance."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The description for the instance."]
    #[clap(long = "description", short = 'D', default_value_t)]
    pub description: String,
    #[doc = "The disks to be created or attached for this instance."]
    #[clap(long = "disks", multiple_values = true)]
    pub disks: Vec<String>,
    #[doc = "The hostname that holds the instance."]
    #[clap(long = "hostname", default_value_t)]
    pub hostname: String,
    #[doc = "A count of bytes, typically used either for memory or storage capacity\n\nThe maximum supported byte count is [`i64::MAX`].  This makes it somewhat inconvenient to define constructors: a u32 constructor can be infallible, but an i64 constructor can fail (if the value is negative) and a u64 constructor can fail (if the value is larger than i64::MAX).  We provide all of these for consumers' convenience."]
    #[clap(long = "memory", short = 'm', default_value_t)]
    pub memory: oxide_api::types::ByteCount,
    #[doc = "The number of CPUs in an Instance"]
    #[clap(long = "ncpus", short = 'c', default_value_t)]
    pub ncpus: oxide_api::types::InstanceCpuCount,
    #[doc = "The network interfaces to be created for this instance."]
    #[clap(long = "network-interfaces", short = 'n')]
    pub network_interfaces: Option<oxide_api::types::InstanceNetworkInterfaceAttachment>,
    #[doc = "User data for instance initialization systems (such as cloud-init). Must be a Base64-encoded string, as specified in RFC 4648 ยง 4 (+ and / characters with padding). Maximum 32 KiB unencoded data."]
    #[clap(long = "user-data", short = 'u', default_value_t)]
    pub user_data: String,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdInstanceCreate {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        let mut description = self.description.clone();
        let mut hostname = self.hostname.clone();
        let mut memory = self.memory.clone();
        let mut instance = self.instance.clone();
        let mut ncpus = self.ncpus.clone();
        let mut organization = self.organization.clone();
        let mut project = self.project.clone();
        if description.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-D|--description required in non-interactive mode"
            ));
        }

        if hostname.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "--hostname required in non-interactive mode"
            ));
        }

        if memory.is_zero() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-m|--memory required in non-interactive mode"
            ));
        }

        if instance.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "[instance] required in non-interactive mode"
            ));
        }

        if ncpus.is_zero() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-c|--ncpus required in non-interactive mode"
            ));
        }

        if organization.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-o|--organization required in non-interactive mode"
            ));
        }

        if project.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-p|--project required in non-interactive mode"
            ));
        }

        let client = ctx.api_client("")?;
        if ctx.io.can_prompt() {
            if organization.is_empty() {
                let mut orgs: Vec<String> = Vec::new();
                let resp = client
                    .organizations()
                    .get_all(oxide_api::types::NameOrIdSortMode::NameAscending)
                    .await?;
                for org in resp {
                    orgs.push(org.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Project organization:")
                    .items(&orgs)
                    .interact()
                {
                    Ok(index) => organization = orgs[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if project.is_empty() {
                let mut org_projects: Vec<String> = Vec::new();
                let projects = client
                    .projects()
                    .get_all(
                        &organization,
                        oxide_api::types::NameOrIdSortMode::NameAscending,
                    )
                    .await?;
                for project in projects {
                    org_projects.push(project.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Select project:")
                    .items(&org_projects)
                    .interact()
                {
                    Ok(index) => project = org_projects[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if instance.is_empty() {
                match dialoguer::Input::<String>::new()
                    .with_prompt(&format!("{} name:", "instance"))
                    .interact_text()
                {
                    Ok(name) => instance = name,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if description.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("instance description")
                    .interact_text()
                {
                    Ok(input) => description = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if hostname.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("instance hostname")
                    .interact_text()
                {
                    Ok(input) => hostname = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if memory.is_zero() {
                {
                    use crate::prompt_ext::PromptExt;
                    memory = oxide_api::types::ByteCount::prompt("instance memory")?;
                }
            }
            if ncpus.is_zero() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("instance ncpus")
                    .interact_text()
                {
                    Ok(input) => ncpus = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
        }

        client
            .instances()
            .post(
                &self.organization,
                &self.project,
                &oxide_api::types::InstanceCreate {
                    description: description.clone(),
                    disks: self
                        .disks
                        .iter()
                        .map(|v| serde_json::from_str(v).unwrap())
                        .collect(),
                    hostname: hostname.clone(),
                    memory: memory.clone(),
                    name: instance.clone(),
                    ncpus: ncpus.clone(),
                    network_interfaces: self.network_interfaces.clone(),
                    user_data: self.user_data.clone(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", organization, project);
        writeln!(
            ctx.io.out,
            "{} Created {} {} in {}",
            cs.success_icon(),
            "instance",
            instance,
            full_name
        )?;
        Ok(())
    }
}

#[doc = "View instance.\n\nDisplay information about an Oxide instance.\n\nWith `--web`, open the instance in a web browser instead."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdInstanceView {
    #[doc = "The instance to view. Can be an ID or name."]
    #[clap(name = "instance", required = true)]
    pub instance: String,
    #[doc = "The project that holds the instance."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "Open the instance in the browser."]
    #[clap(short, long)]
    pub web: bool,
    #[doc = r" Output format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdInstanceView {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.web {
            let url = format!("https://{}/{}", ctx.config.default_host()?, self.instance);
            ctx.browser("", &url)?;
            return Ok(());
        }

        let client = ctx.api_client("")?;
        let result = client
            .instances()
            .get(&self.instance, &self.organization, &self.project)
            .await?;
        let format = ctx.format(&self.format)?;
        ctx.io.write_output(&format, &result)?;
        Ok(())
    }
}

#[doc = "Delete instance."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdInstanceDelete {
    #[doc = "The instance to delete. Can be an ID or name."]
    #[clap(name = "instance", required = true)]
    pub instance: String,
    #[doc = "The project to delete the instance from."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = r" Confirm deletion without prompting."]
    #[clap(long)]
    pub confirm: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdInstanceDelete {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if !ctx.io.can_prompt() && !self.confirm {
            return Err(anyhow::anyhow!(
                "--confirm required when not running interactively"
            ));
        }

        let client = ctx.api_client("")?;
        if !self.confirm {
            if let Err(err) = dialoguer::Input::<String>::new()
                .with_prompt(format!("Type {} to confirm deletion:", self.instance))
                .validate_with(|input: &String| -> Result<(), &str> {
                    if input.trim() == self.instance {
                        Ok(())
                    } else {
                        Err("mismatched confirmation")
                    }
                })
                .interact_text()
            {
                return Err(anyhow::anyhow!("prompt failed: {}", err));
            }
        }

        client
            .instances()
            .delete(&self.instance, &self.organization, &self.project)
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        writeln!(
            ctx.io.out,
            "{} Deleted {} {} from {}",
            cs.success_icon_with_color(ansi_term::Color::Red),
            "instance",
            self.instance,
            full_name
        )?;
        Ok(())
    }
}

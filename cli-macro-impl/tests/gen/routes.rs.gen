use num_traits::identities::Zero;
#[derive(Parser, Debug, Clone)]
enum SubCommand {
    List(CmdRouteList),
    Create(CmdRouteCreate),
    #[clap(alias = "get")]
    View(CmdRouteView),
    Edit(CmdRouteEdit),
    Delete(CmdRouteDelete),
}

#[doc = "List routes."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdRouteList {
    #[doc = "The project that holds the routes."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The router that holds the routes."]
    #[clap(long = "router", short = 'r', required = true)]
    pub router: oxide_api::types::Name,
    #[doc = "The order in which to sort the results."]
    #[clap(long = "sort-by", short = 's', default_value_t)]
    pub sort_by: oxide_api::types::NameSortMode,
    #[doc = "The VPC that holds the routes."]
    #[clap(long = "vpc", short = 'v', required = true)]
    pub vpc: oxide_api::types::Name,
    #[doc = r" Maximum number of items to list."]
    #[clap(long, short, default_value = "30")]
    pub limit: u32,
    #[doc = r" Make additional HTTP requests to fetch all pages."]
    #[clap(long)]
    pub paginate: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdRouteList {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.limit < 1 {
            return Err(anyhow::anyhow!("--limit must be greater than 0"));
        }

        let client = ctx.api_client("")?;
        let results = if self.paginate {
            client
                .routes()
                .get_all(
                    &self.organization,
                    &self.project,
                    &self.router,
                    self.sort_by.clone(),
                    &self.vpc,
                )
                .await?
        } else {
            client
                .routes()
                .get_page(
                    self.limit,
                    &self.organization,
                    "",
                    &self.project,
                    &self.router,
                    self.sort_by.clone(),
                    &self.vpc,
                )
                .await?
        };
        let format = ctx.format(&self.format)?;
        ctx.io.write_output_for_vec(&format, &results)?;
        Ok(())
    }
}

#[doc = "Create a new route.\n\nTo create a route interactively, use `oxide route create` with no arguments."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdRouteCreate {
    #[doc = "The name of the route to create."]
    #[clap(name = "route", required = true)]
    pub route: String,
    #[doc = "The project that holds the route."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The router that holds the route."]
    #[clap(long = "router", short = 'r', default_value_t)]
    pub router: oxide_api::types::Name,
    #[doc = "The VPC that holds the route."]
    #[clap(long = "vpc", short = 'v', default_value_t)]
    pub vpc: oxide_api::types::Name,
    #[doc = "The description for the route."]
    #[clap(long = "description", short = 'D', default_value_t)]
    pub description: String,
    #[doc = "A `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.\n\nWhen traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule."]
    #[clap(long = "destination")]
    pub destination: Option<oxide_api::types::RouteDestination>,
    #[doc = "A `RouteTarget` describes the possible locations that traffic matching a route destination can be sent."]
    #[clap(long = "target", short = 't')]
    pub target: Option<oxide_api::types::RouteTarget>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdRouteCreate {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        let mut description = self.description.clone();
        let mut destination = self.destination.clone();
        let mut route = self.route.clone();
        let mut organization = self.organization.clone();
        let mut project = self.project.clone();
        let mut router = self.router.clone();
        let mut target = self.target.clone();
        let mut vpc = self.vpc.clone();
        if description.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-D|--description required in non-interactive mode"
            ));
        }

        if destination.is_none() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "--destination required in non-interactive mode"
            ));
        }

        if route.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!("[route] required in non-interactive mode"));
        }

        if organization.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-o|--organization required in non-interactive mode"
            ));
        }

        if project.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-p|--project required in non-interactive mode"
            ));
        }

        if router.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-r|--router required in non-interactive mode"
            ));
        }

        if target.is_none() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!(
                "-t|--target required in non-interactive mode"
            ));
        }

        if vpc.is_empty() && !ctx.io.can_prompt() {
            return Err(anyhow::anyhow!("-v|--vpc required in non-interactive mode"));
        }

        let client = ctx.api_client("")?;
        if ctx.io.can_prompt() {
            if organization.is_empty() {
                let mut orgs: Vec<String> = Vec::new();
                let resp = client
                    .organizations()
                    .get_all(oxide_api::types::NameOrIdSortMode::NameAscending)
                    .await?;
                for org in resp {
                    orgs.push(org.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Project organization:")
                    .items(&orgs)
                    .interact()
                {
                    Ok(index) => organization = orgs[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if project.is_empty() {
                let mut org_projects: Vec<String> = Vec::new();
                let projects = client
                    .projects()
                    .get_all(
                        &organization,
                        oxide_api::types::NameOrIdSortMode::NameAscending,
                    )
                    .await?;
                for project in projects {
                    org_projects.push(project.name.to_string());
                }
                match dialoguer::Select::new()
                    .with_prompt("Select project:")
                    .items(&org_projects)
                    .interact()
                {
                    Ok(index) => project = org_projects[index].to_string(),
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if route.is_empty() {
                match dialoguer::Input::<String>::new()
                    .with_prompt(&format!("{} name:", "route"))
                    .interact_text()
                {
                    Ok(name) => route = name,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if description.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("route description")
                    .interact_text()
                {
                    Ok(input) => description = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if destination.is_none() {
                {
                    use crate::prompt_ext::PromptExt;
                    destination = Some(oxide_api::types::RouteDestination::prompt(
                        "Select a route destination type",
                    )?);
                }
            }
            if router.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("route router")
                    .interact_text()
                {
                    Ok(input) => router = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
            if target.is_none() {
                {
                    use crate::prompt_ext::PromptExt;
                    target = Some(oxide_api::types::RouteTarget::prompt(
                        "Select a route target type",
                    )?);
                }
            }
            if vpc.is_empty() {
                match dialoguer::Input::<_>::new()
                    .with_prompt("route vpc")
                    .interact_text()
                {
                    Ok(input) => vpc = input,
                    Err(err) => {
                        return Err(anyhow::anyhow!("prompt failed: {}", err));
                    }
                }
            }
        }

        client
            .routes()
            .post(
                &self.organization,
                &self.project,
                &self.router,
                &self.vpc,
                &oxide_api::types::RouterRouteCreateParams {
                    description: description.clone(),
                    destination: destination.unwrap(),
                    name: route.clone(),
                    target: target.unwrap(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", organization, project);
        writeln!(
            ctx.io.out,
            "{} Created {} {} in {}",
            cs.success_icon(),
            "route",
            route,
            full_name
        )?;
        Ok(())
    }
}

#[doc = "View route.\n\nDisplay information about an Oxide route.\n\nWith `--web`, open the route in a web browser instead."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdRouteView {
    #[doc = "The route to view. Can be an ID or name."]
    #[clap(name = "route", required = true)]
    pub route: String,
    #[doc = "The project that holds the route."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The router that holds the route."]
    #[clap(long = "router", short = 'r', required = true)]
    pub router: oxide_api::types::Name,
    #[doc = "The VPC that holds the route."]
    #[clap(long = "vpc", short = 'v', required = true)]
    pub vpc: oxide_api::types::Name,
    #[doc = "Open the route in the browser."]
    #[clap(short, long)]
    pub web: bool,
    #[doc = r" Display output in json, yaml, or table format."]
    #[clap(long, short)]
    pub format: Option<crate::types::FormatOutput>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdRouteView {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.web {
            let url = format!("https://{}/{}", ctx.config.default_host()?, self.route);
            ctx.browser("", &url)?;
            return Ok(());
        }

        let client = ctx.api_client("")?;
        let result = client
            .routes()
            .get(
                &self.organization,
                &self.project,
                &self.route,
                &self.router,
                &self.vpc,
            )
            .await?;
        let format = ctx.format(&self.format)?;
        ctx.io.write_output(&format, &result)?;
        Ok(())
    }
}

#[doc = "Edit route settings."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdRouteEdit {
    #[doc = "The route to edit. Can be an ID or name."]
    #[clap(name = "route", required = true)]
    pub route: String,
    #[doc = "The project that holds the route."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The router that holds the route."]
    #[clap(long = "router", short = 'r', required = true)]
    pub router: oxide_api::types::Name,
    #[doc = "The VPC that holds the route."]
    #[clap(long = "vpc", short = 'v', required = true)]
    pub vpc: oxide_api::types::Name,
    #[doc = "The new description for the route."]
    #[clap(long = "description", short = 'D', required = false, default_value_t)]
    pub new_description: String,
    #[doc = "A `RouteDestination` is used to match traffic with a routing rule, on the destination of that traffic.\n\nWhen traffic is to be sent to a destination that is within a given `RouteDestination`, the corresponding [`RouterRoute`] applies, and traffic will be forward to the [`RouteTarget`] for that rule."]
    #[clap(long = "destination", required = true)]
    pub new_destination: Option<oxide_api::types::RouteDestination>,
    #[doc = "The new name for the route."]
    #[clap(long = "name", short = 'n', required = false, default_value_t)]
    pub new_name: oxide_api::types::Name,
    #[doc = "A `RouteTarget` describes the possible locations that traffic matching a route destination can be sent."]
    #[clap(long = "target", short = 't', required = true)]
    pub new_target: Option<oxide_api::types::RouteTarget>,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdRouteEdit {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if self.new_description.is_empty()
            && self.new_destination.is_none()
            && self.new_name.is_empty()
            && self.new_target.is_none()
        {
            return Err(anyhow::anyhow!("nothing to edit"));
        }

        let client = ctx.api_client("")?;
        let mut name = self.route.clone();
        if !self.new_name.is_empty() {
            name = self.new_name.to_string();
        }

        let result = client
            .routes()
            .put(
                &self.organization,
                &self.project,
                &self.route,
                &self.router,
                &self.vpc,
                &oxide_api::types::RouterRouteUpdateParams {
                    description: self.new_description.clone(),
                    destination: self.new_destination.as_ref().unwrap().clone(),
                    name: self.new_name.clone(),
                    target: self.new_target.as_ref().unwrap().clone(),
                },
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        if !self.new_name.is_empty() {
            writeln!(
                ctx.io.out,
                "{} Edited {} {} -> {} in {}",
                cs.success_icon(),
                "route",
                self.route,
                self.new_name,
                full_name
            )?;
        } else {
            writeln!(
                ctx.io.out,
                "{} Edited {} {} in {}",
                cs.success_icon_with_color(ansi_term::Color::Red),
                "route",
                self.route,
                full_name
            )?;
        }

        Ok(())
    }
}

#[doc = "Delete route."]
#[derive(clap :: Parser, Debug, Clone)]
#[clap(verbatim_doc_comment)]
pub struct CmdRouteDelete {
    #[doc = "The route to delete. Can be an ID or name."]
    #[clap(name = "route", required = true)]
    pub route: String,
    #[doc = "The project to delete the route from."]
    #[clap(long, short, required = true)]
    pub project: String,
    #[doc = r" The organization that holds the project."]
    #[clap(long, short, required = true, env = "OXIDE_ORG")]
    pub organization: String,
    #[doc = "The router that holds the route."]
    #[clap(long = "router", short = 'r', required = true)]
    pub router: oxide_api::types::Name,
    #[doc = "The VPC that holds the route."]
    #[clap(long = "vpc", short = 'v', required = true)]
    pub vpc: oxide_api::types::Name,
    #[doc = r" Confirm deletion without prompting."]
    #[clap(long)]
    pub confirm: bool,
}

#[async_trait::async_trait]
impl crate::cmd::Command for CmdRouteDelete {
    async fn run(&self, ctx: &mut crate::context::Context) -> anyhow::Result<()> {
        if !ctx.io.can_prompt() && !self.confirm {
            return Err(anyhow::anyhow!(
                "--confirm required when not running interactively"
            ));
        }

        let client = ctx.api_client("")?;
        if !self.confirm {
            if let Err(err) = dialoguer::Input::<String>::new()
                .with_prompt(format!("Type {} to confirm deletion:", self.route))
                .validate_with(|input: &String| -> Result<(), &str> {
                    if input.trim() == self.route {
                        Ok(())
                    } else {
                        Err("mismatched confirmation")
                    }
                })
                .interact_text()
            {
                return Err(anyhow::anyhow!("prompt failed: {}", err));
            }
        }

        client
            .routes()
            .delete(
                &self.organization,
                &self.project,
                &self.route,
                &self.router,
                &self.vpc,
            )
            .await?;
        let cs = ctx.io.color_scheme();
        let full_name = format!("{}/{}", self.organization, self.project);
        writeln!(
            ctx.io.out,
            "{} Deleted {} {} from {}",
            cs.success_icon_with_color(ansi_term::Color::Red),
            "route",
            self.route,
            full_name
        )?;
        Ok(())
    }
}
